# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-08 00:35
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default=b'multiplechoice', max_length=50)),
                ('question', models.TextField(blank=True)),
                ('answers', models.TextField(default=b'[]')),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('channelmetadata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.ChannelMetadata')),
            ],
            options={
                'verbose_name': 'Channel',
                'verbose_name_plural': 'Channels',
            },
            bases=('content.channelmetadata',),
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Title', help_text='Title of the content item', max_length=50, verbose_name='title')),
                ('description', models.TextField(default='Description', help_text='Brief description of what this content item is', max_length=200, verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('contentmetadata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='content.ContentMetadata')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified')),
                ('published', models.BooleanField(default=False, help_text='If published, students can access this item', verbose_name='Published')),
                ('sort_order', models.FloatField(default=0, help_text='Ascending, lowest number shown first', max_length=50, verbose_name='sort order')),
                ('license_owner', models.CharField(blank=True, help_text='Organization of person who holds the essential rights', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
            },
            bases=('content.contentmetadata',),
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TopicTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Displayed to the user', max_length=255, verbose_name='topic tree name')),
                ('is_published', models.BooleanField(default=False, help_text='If published, students can access this channel', verbose_name='Published')),
                ('channel', models.ForeignKey(help_text='For different versions of the tree in the same channel (trash, edit, workspace)', null=True, on_delete=django.db.models.deletion.CASCADE, to='contentcuration.Channel', verbose_name='channel')),
                ('root_node', models.ForeignKey(help_text='The starting point for the tree, the title of it is the title shown in the menu', null=True, on_delete=django.db.models.deletion.CASCADE, to='contentcuration.Node', verbose_name='root node')),
            ],
            options={
                'verbose_name': 'Topic tree',
                'verbose_name_plural': 'Topic trees',
            },
        ),
        migrations.AddField(
            model_name='channel',
            name='clipboard',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clipboard', to='contentcuration.TopicTree'),
        ),
        migrations.AddField(
            model_name='channel',
            name='deleted',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deleted', to='contentcuration.TopicTree'),
        ),
        migrations.AddField(
            model_name='channel',
            name='draft',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='draft', to='contentcuration.TopicTree'),
        ),
        migrations.AddField(
            model_name='channel',
            name='editors',
            field=models.ManyToManyField(help_text='Users with edit rights', to=settings.AUTH_USER_MODEL, verbose_name='editors'),
        ),
        migrations.AddField(
            model_name='channel',
            name='published',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='published', to='contentcuration.TopicTree'),
        ),
        migrations.AddField(
            model_name='assessmentitem',
            name='exercise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='all_assessment_items', to='contentcuration.Exercise'),
        ),
    ]
